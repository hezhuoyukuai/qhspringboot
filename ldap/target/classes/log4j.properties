#定义项目中包下面的类的日志级别；我占用了Log4j的info级别做业务日志输出；你可要自定义日志级别。
log4j.logger.cn.promore.bf=info,dblog
#output in root logger  是否把项目日志输出到主日志中
log4j.additivity.cn.promore.bf=false 
log4j.appender.dblog=org.apache.log4j.jdbc.JDBCAppender #定义日志输出为数据库JDBC输出。
log4j.appender.dblog.encoding=UTF-8 #定义字符集防止中文乱码
#the lowest log level of the appender
log4j.appender.dblog.Threshold=info #记录的最低日志级别。高于这个的就会全部会被记录；所以你知道我为什么占用info来打业务日志了。
log4j.appender.dblog.BufferSize=10 #日志缓存；这个配置可以提交性能；累计操作N（10）个记录一次性写入数据库
log4j.appender.dblog.driver=com.mysql.jdbc.Driver #数据库驱动
#development enviorment
log4j.appender.dblog.URL=jdbc:mysql://localhost:3306/mypro?useUnicode=true&characterEncoding=utf-8&useSSL=false
log4j.appender.dblog.user=root
log4j.appender.dblog.password=123
#打日志的SQL语句；提前建好日志表。请注意 %X{变量名} 这里使用的就是MDC；值注入！其他的%M这些都是Log4j的内置变量。
log4j.appender.dblog.sql= INSERT INTO qh_app_log (id,username,clientIp,operateModule,operateModuleName,operateType,operateTime,operateContent,operateResult) VALUES (1,'%X{username}','%X{clientIp}','%C{1}','%X{operateModuleName}','%M','%d{yyyy-MM-dd HH🇲🇲ss}','%X{operateContent}','%X{operateResult}')
#同步输出到控制台的配置。
log4j.appender.dblog.layout=org.apache.log4j.PatternLayout  
log4j.appender.dblog.layout.ConversionPattern=-[%d{yyyy-MM-dd HH🇲🇲ss}]-[%C{1}]-[%M]-%X{clientIp}-%X{operateModuleName}-%X{username}-%X{operateContent}-%X{operateResult}-%m-%n